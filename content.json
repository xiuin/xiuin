{"meta":{"title":"xiuin","subtitle":null,"description":"测试","author":"xiuin","url":""},"pages":[{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2019-07-07T07:20:02.322Z","comments":true,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":"","keywords":"关于"},{"title":"book","date":"2019-02-10T13:32:48.000Z","updated":"2019-07-07T10:07:12.587Z","comments":false,"path":"book/index.html","permalink":"/book/index.html","excerpt":"","text":"","keywords":null},{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2019-06-01T14:21:46.000Z","comments":false,"path":"client/index.html","permalink":"/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2019-06-01T14:21:46.000Z","comments":false,"path":"donate/index.html","permalink":"/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2019-06-01T14:21:46.000Z","comments":false,"path":"lab/index.html","permalink":"/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2019-06-09T13:00:51.261Z","comments":true,"path":"comment/index.html","permalink":"/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2019-07-07T08:37:31.250Z","comments":false,"path":"music/index.html","permalink":"/music/index.html","excerpt":"","text":"剑网三同人曲 四月是你的谎言 原声集 少女终末旅行 原声集 Carole & Tuesday","keywords":"喜欢的音乐"},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2019-06-01T14:21:46.000Z","comments":true,"path":"tags/index.html","permalink":"/tags/index.html","excerpt":"","text":""},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2019-06-09T15:38:50.033Z","comments":true,"path":"links/index.html","permalink":"/links/index.html","excerpt":"","text":"[さくら荘のhojun] 与&nbsp; Mashiro&nbsp; （ 真（ま）白（しろ） ） 对话中... function bot_ui_ini() { var botui = new BotUI(\"hello-mashiro\"); botui.message.add({ delay: 800, content: \"Hi, there111👋\" }).then(function () { botui.message.add({ delay: 1100, content: \"这里是 Mashiro\" }).then(function () { botui.message.add({ delay: 1100, content: \"一个可爱的蓝孩子~\" }).then(function () { botui.action.button({ delay: 1600, action: [{ text: \"然后呢？ 😃\", value: \"sure\" }, { text: \"少废话！ 🙄\", value: \"skip\" }] }).then(function (a) { \"sure\" == a.value && sure(); \"skip\" == a.value && end() }) }) }) }); var sure = function () { botui.message.add({ delay: 600, content: \"😘\" }).then(function () { secondpart() }) }, end = function () { botui.message.add({ delay: 600, content: \"![...](https://view.moezx.cc/images/2018/05/06/a1c4cd0452528b572af37952489372b6.md.jpg)\" }) }, secondpart = function () { botui.message.add({ delay: 1500, content: \"目前就读于上海财经大学\" }).then(function () { botui.message.add({ delay: 1500, content: \"向往技术却误入商科，但后来喜欢上了经济学…\" }).then(function () { botui.message.add({ delay: 1200, content: \"因为数据分析也需要Coder嘛\" }).then(function () { botui.message.add({ delay: 1500, content: \"主攻 R 语言和 Python，略懂 STATA，偶尔也折腾 HTML/CSS/JavaScript/PHP\" }).then(function () { botui.message.add({ delay: 1500, content: \"研究的方向，是经济/金融方向的数据分析（data science）以及机器学习（machine learning）\" }).then(function () { botui.message.add({ delay: 1800, content: \"喜欢画画，希望有一天能够被称为画师\" }).then(function () { botui.action.button({ delay: 1100, action: [{ text: \"为什么叫Mashiro呢？ 🤔\", value: \"why-mashiro\" }] }).then(function (a) { thirdpart() }) }) }) }) }) }) }) }, thirdpart = function () { botui.message.add({ delay: 1E3, content: \"Mashiro以及站名都来自一部动画，因为和主角有一样的爱好~ 如果有兴趣可以找找首页上的视频~\" }).then(function () { botui.action.button({ delay: 1500, action: [{ text: \"为什么是白猫呢？ 🤔\", value: \"why-cat\" }] }).then(function (a) { fourthpart() }) }) }, fourthpart = function () { botui.message.add({ delay: 1E3, content: \"因为对GitHub有种执念… \" }).then(function () { botui.message.add({ delay: 1100, content: \"而且我真的是猫控！\" }).then(function () { botui.action.button({ delay: 1500, action: [{ text: \"域名有什么含意吗？(ง •_•)ง\", value: \"why-domain\" }] }).then(function (a) { fifthpart() }) }) }) }, fifthpart = function () { botui.message.add({ delay: 1E3, content: \"emmmm，看备案信息你就知道了=.= 本来想要zheng.xin的，但50万真买不起。。\" }).then(function () { botui.message.add({ delay: 1600, content: \"那么，仔细看看我的博客吧？ ^_^\" }) }) } } bot_ui_ini()","keywords":"友人帐"},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2019-06-01T14:21:46.000Z","comments":true,"path":"rss/index.html","permalink":"/rss/index.html","excerpt":"","text":""},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2019-06-01T14:21:46.000Z","comments":false,"path":"theme-sakura/index.html","permalink":"/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2019-06-01T14:21:46.000Z","comments":false,"path":"video/index.html","permalink":"/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"},{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2019-07-07T07:18:29.638Z","comments":false,"path":"bangumi/index.html","permalink":"/bangumi/index.html","excerpt":"","text":"","keywords":null}],"posts":[{"title":"我的Sublime必备配置","slug":"我的Sublime必备配置","date":"2019-07-06T10:08:55.000Z","updated":"2019-07-06T15:46:05.115Z","comments":true,"path":"2019/07/06/我的Sublime必备配置/","link":"","permalink":"/2019/07/06/我的Sublime必备配置/","excerpt":"","text":"安装Package Control使用Ctrl+`快捷键或者通过View-&gt;Show Console菜单打开命令行，粘贴如下代码。如果顺利的话，此时就可以在Preferences菜单下看到Package Settings和Package Control两个菜单了。 import urllib.request,os; pf = &#39;Package Control.sublime-package&#39;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener(urllib.request.ProxyHandler())); open(os.path.join(ipp, pf), &#39;wb&#39;).write(urllib.request.urlopen(&#39;http://sublime.wbond.net/&#39; + pf.replace(&#39; &#39;,&#39;%20&#39;)).read()) Preferences / Settings - User{ &quot;default_line_ending&quot;: &quot;unix&quot;, &quot;ignored_packages&quot;: [ &quot;Vintage&quot; ], &quot;translate_tabs_to_spaces&quot;: true } 插件ctrl+shift+p后在弹出框输入名字即可安装 Trailing spaces 功能： 检测并一键去除代码中多余的空格 简介： 写python必备 使用： 安装插件并重启，即可自动提示多余空格。一键删除多余空格：CTRL+SHITF+T（需配置）。快捷键配置：在Preferences / Key Bindings – User加上代码（数组内） [ {&quot;keys&quot;:[&quot;ctrl+shift+t&quot;],&quot;command&quot;:&quot;delete_trailing_spaces&quot;} ] Doc​Blockr 功能： 生成优美注释 简介： 标准的注释，包括函数名、参数、返回值等，并以多行显示，省去手动编写 未完待续…………..= =，等我回公司看看电脑 参考 实用的sublime插件集合 – sublime推荐必备插件 sublime注释插件与javascript注释规范","categories":[{"name":"资源","slug":"资源","permalink":"/categories/资源/"}],"tags":[{"name":"tool","slug":"tool","permalink":"/tags/tool/"}],"keywords":[{"name":"资源","slug":"资源","permalink":"/categories/资源/"}]},{"title":"Xshell配色方案","slug":"Xshell配色方案","date":"2019-07-06T09:14:50.000Z","updated":"2019-07-06T15:46:53.320Z","comments":true,"path":"2019/07/06/Xshell配色方案/","link":"","permalink":"/2019/07/06/Xshell配色方案/","excerpt":"","text":"使用方法新建文本文档，然后拷贝代码到文档里，保存为.xcs格式，最后将.xcs导入xshell配色方案即可 skycolor.xcs最喜欢的一款，自从发现它，用xshell都开心了很多 [skycolor] text=00ff80 cyan(bold)=00ffff text(bold)=e9e9e9 magenta=c000c0 green=80ff00 green(bold)=3c5a38 background=042028 cyan=00c0c0 red(bold)=ff0000 yellow=c0c000 magenta(bold)=ff00ff yellow(bold)=ffff00 red=ff4500 white=c0c0c0 blue(bold)=1e90ff white(bold)=fdf6e3 black=000000 blue=00bfff black(bold)=808080 [Names] name0=sky ubuntu.xcsubuntu配色，开ubuntu窗口时会用 [ubuntu] text(bold)=ffffff magenta(bold)=ad7fa8 text=ffffff white(bold)=eeeeec green=4e9a06 red(bold)=ef2929 green(bold)=8ae234 black(bold)=555753 red=cc0000 blue=3465a4 black=000000 blue(bold)=729fcf yellow(bold)=fce94f cyan(bold)=34e2e2 yellow=c4a000 magenta=75507b background=300a24 white=d3d7cf cyan=06989a [Names] count=1 name0=ubuntu newBlack.xcsXshell自带的配色，这款是唯一一个我喜欢的 [New Black] text=f2f2f2 cyan(bold)=50ebfc text(bold)=ffffff magenta=7b5175 green=008000 green(bold)=1cc470 background=242424 cyan=00a2c4 red(bold)=cf9e72 yellow=999606 magenta(bold)=a97ead yellow(bold)=e2e234 red=a56434 white=cfd8d3 blue(bold)=6f6ff4 white(bold)=eceeee black=36342e blue=4646ff black(bold)=535755 [Names] name0=New Black count=1 更多主题遇到喜欢的会再补充 https://github.com/netsarang/Xshell-ColorScheme","categories":[{"name":"资源","slug":"资源","permalink":"/categories/资源/"}],"tags":[{"name":"tool","slug":"tool","permalink":"/tags/tool/"}],"keywords":[{"name":"资源","slug":"资源","permalink":"/categories/资源/"}]},{"title":"python+微博的新闻自动发布","slug":"python爬取热门新闻并自动发到微博","date":"2019-07-06T08:34:19.000Z","updated":"2019-07-06T15:46:48.366Z","comments":true,"path":"2019/07/06/python爬取热门新闻并自动发到微博/","link":"","permalink":"/2019/07/06/python爬取热门新闻并自动发到微博/","excerpt":"","text":"目标 新闻源，澎湃新闻：https://www.thepaper.cn/ 每晚12点执行爬虫，获取到下一天要发布的内容 按照评论数排序，取前12条 少于15字的剔除 带有“|”符号的剔除 视频新闻剔除 脚本一键生成发布格式 如果新闻中有敏感词，需要转成图片发布 安装依赖# 下载geckodriver：https://github.com/mozilla/geckodriver/releases sudo pip install requests sudo pip install beautifulsoup4 sudo pip install -i https://pypi.douban.com/simple lxml sudo pip install -i https://pypi.douban.com/simple pandas sudo pip install selenium sudo pip install sinaweibopy 爬取热度最高的前20条新闻# coding:utf-8 import requests import lxml from bs4 import BeautifulSoup import time # 为了解决翻页问题，我并没有直接用这个url url = &#39;http://www.thepaper.cn/&#39; parseRetList = [] # 循环获取一天的的数据 def getAllPage(pageNum): for i in range(2, pageNum): t = time.time() # 精选新闻 url = &#39;https://www.thepaper.cn/load_chosen.jsp?nodeids=25949&amp;topCids=3453401,3451038,3451335,3451175,3453320,&amp;pageidx=%d&amp;lastTime=%d&#39; % (i, int(round(t * 1000))) # 时事新闻 # url = &#39;https://www.thepaper.cn/load_index.jsp?nodeids=25462,25488,25489,25490,25423,25426,25424,25463,25491,25428,68750,27604,25464,25425,25429,25481,25430,25678,25427,25422,25487,25634,25635,25600,&amp;topCids=,3458196,3460097,3458214,3458151,3458216&amp;pageidx=%d&amp;lastTime=%d&#39; % (i, int(round(t * 1000))) print(&#39;--------------- %d --------------- &#39; % i) respons = requests.get(url) respons.encoding = (&#39;utf8&#39;) res = respons.text soup = BeautifulSoup(res, &#39;lxml&#39;) news = soup.find_all(attrs = {&#39;class&#39;: &#39;news_li&#39;}) if len(news) == 0: return parseOnePage(news) # 解析一页的数据 def parseOnePage(news): for i in range(len(news)): title = &#39;&#39; hot = 0 if news[i].find(attrs = {&#39;class&#39;: &#39;p_time&#39;}): p_time = news[i].find(attrs = {&#39;class&#39;: &#39;p_time&#39;}).get_text() if p_time != &#39;&#39;: continue if news[i].find(&#39;h2&#39;) and news[i].find(&#39;h2&#39;).find(&#39;a&#39;): title = news[i].find(&#39;h2&#39;).find(&#39;a&#39;).get_text() # 长度太短的不要 if len(title) &lt; 16: continue # 有这个符号的新闻标题一般无法直接看懂 if &quot;|&quot; in title: continue # 不要疑问句的新闻 if title[-1] == &#39;?&#39;: continue trbszan = news[i].find(attrs = {&#39;class&#39;: &#39;trbszan&#39;}) if trbszan: hot = trbszan.get_text() if &quot;k&quot; in hot: hot = hot[:-1] hot = float(hot)*1000 # 偏向于国家大事 # if &quot;外交部&quot; in title: # hot = int(hot) + 3000 # elif &quot;国&quot; in title: # hot = int(hot) + 2500 else: continue print(title) print(hot) parseRetList.append({&#39;title&#39;: title, &#39;hot&#39;: int(hot)}) # 打印排名前20的新闻 getAllPage(40) parseRetList.sort(key=lambda k: k[&#39;hot&#39;], reverse = True) parseRetList = parseRetList[0:20] for i in range(0, len(parseRetList)): print(&quot;[%d] %s&quot; % (parseRetList[i][&#39;hot&#39;], parseRetList[i][&#39;title&#39;])) # 按发布格式打印排名前12的新闻 timeNow = str(time.strftime(&quot;[%Y.%m.%d]&quot;)) info = &#39;&#39; for i in range(1, 13): info = info + (&quot;%d. %s\\n&quot; % (i, parseRetList[i-1][&#39;title&#39;])) print(info) 自动发布# coding:utf-8 from selenium import webdriver driver = webdriver.Firefox(executable_path=&#39;/Users/xiu/work/workspace/test/geckodriver&#39;) url=&#39;http://weibo.com/login.php&#39; # get打开微博主页 driver.get(url) # 页面加载完全 time.sleep(10) # 找到用户名输入框 input_account=driver.find_element_by_id(&#39;loginname&#39;) # 找到密码输入框 input_psw=driver.find_element_by_css_selector(&#39;input[type=&quot;password&quot;]&#39;) # 输入用户名和密码 input_account.send_keys(&#39;hdy404@163.com&#39;) input_psw.send_keys(&#39;30016401332&#39;) # 找到登录按钮 bt_logoin=driver.find_element_by_xpath(&#39;//div[@node-type=&quot;normal_form&quot;]//div[@class=&quot;info_list login_btn&quot;]/a&#39;) # 点击登录 bt_logoin.click() # 等待页面加载完毕 time.sleep(10) weibo_content = driver.find_element_by_xpath(&#39;//div[@class=&quot;input&quot;]/textarea[@class=&quot;W_input&quot;]&#39;) weibo_content.send_keys(info) bt_push = driver.find_element_by_xpath(&#39;//div[@class=&quot;func&quot;]/a&#39;) # 点击发布 bt_push.click() 参考 Python+Selenium自动发送新浪微博 python3+selenium 自动发布微博","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"python","slug":"python","permalink":"/tags/python/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"MMD入门教程","slug":"MMD入门教程","date":"2019-07-06T06:14:08.000Z","updated":"2019-07-06T15:46:42.370Z","comments":true,"path":"2019/07/06/MMD入门教程/","link":"","permalink":"/2019/07/06/MMD入门教程/","excerpt":"","text":"获取资源模型在D站搜索下载模型：www.deviantart.com 模型搜索：TDA DL 场景配布搜索：stage DL 场景在静画搜索并下载场景：http://seiga.nicovideo.jp/ 场景配布搜索：MMDステージ配布あり 动作数据在N站搜索并下载动作数据：http://www.nicovideo.jp/ 动作数据搜索：モーション配布 镜头数据搜索：カメラ配布 配布在B碗下载场景配布：B碗：https://bowlroll.net/file/index 从B碗下载的文件直接解压会乱码，需要用Bandizip设置为日语再解压 音频YouTube下载音频，需要用到软件 http://ummydownloader.com/ 输入视频链接，等加载出来之后下拉选择MP3下载 资源处理 用格式工厂把mp3转为wav 从B碗下载的文件直接解压会乱码，需要用Bandizip设置为日语再解压 动作数据格式应是vmd，模型格式应是pmd，pmx的模型不好载入。如果要使用pmx，需要处理一下 选中模型，选择重命名。 后辍改为“pmd”（不用打开改名字后的压缩文件，直接打开模型再载入动作就可以了） 制作制作 载入人物模型：pmx 载入动作数据：vmd 载入镜头数据：vmd 载入场景：pmx 载入音频：wav 渲染 下载ray-mmd 1.5.2：git clone –recursive https://github.com/ray-cast/ray-mmd.git 下载Ray_Toon_Met Ver1.3： https://bowlroll.net/file/151160，按照readme解压 拖入ray.x，ray_controller.pmx 点击MMEefect，多选none载入main.fx 选项卡EnvLightMap，双击sky with box，弹出文件夹，选择Sky with lighting with rotation.fx 关闭坐标轴、地面阴影、反锯齿、mipmap 背景-&gt;模型绘制顺序：天空最上，场景第二，人物第三，ray_controller最后 完成导出导出avi视频 把分辨率调成1280×720比较好 制作借物表用SrtEdit做借物表2012 时间0-4秒 格式-文本特效编辑-对齐方式-左下角 借物表内容： Model: Angie-Doll Stage: 山田淀子 さん Camera: 鬼瞳 Action: 兰若 Music：チカっとチカ千花っ-小原好美 Effects: ray-mmd 1.5.2 压制视频用小丸工具箱压制视频 默认配置，编码器根据电脑位数选，无音频流压制 压制音频，再封装","categories":[{"name":"宅文化","slug":"宅文化","permalink":"/categories/宅文化/"}],"tags":[{"name":"视频","slug":"视频","permalink":"/tags/视频/"}],"keywords":[{"name":"宅文化","slug":"宅文化","permalink":"/categories/宅文化/"}]},{"title":"用Sphinx+ReadTheDocs写完美的API文档","slug":"用Sphinx-ReadTheDocs写完美的API文档","date":"2019-06-15T10:43:44.000Z","updated":"2019-07-06T15:46:24.879Z","comments":true,"path":"2019/06/15/用Sphinx-ReadTheDocs写完美的API文档/","link":"","permalink":"/2019/06/15/用Sphinx-ReadTheDocs写完美的API文档/","excerpt":"","text":"环境搭建 官方教程 安装 Sphinx: pip install sphinx sphinx-autobuild 工程新建项目mkdir testProject cd testProject sphinx-quickstart项目配置sphinx-quickstart之后开始项目配置 一般来说只有三项是需要你手动输入的，其余的均可以直接敲Enter 1. &gt; Project name: sphinxtestProject （项目名称） 2. &gt; Author name(s): Tom （作者） 3. &gt; Project version []: 1.0.1 （项目版本）查看效果 编译之后把testProject/_build/html/index.html拖到浏览器就可以查看效果 make html 插件markdown支持markdown转html，安装pip install recommonmark在conf.py中增加： source_parsers={ &#39;.md&#39;: &#39;recommonmark.parser.CommonMarkParser&#39; } source_suffix=[&#39;.rst&#39;,&#39;.md&#39;]markdown的表格安装 pip install sphinx-markdown-tables 在conf.py中增加： extensions = [ &#39;sphinx_markdown_tables&#39;, ] 主题主题更换 换成最常见的蓝灰带左边栏的主题 安装 pip install sphinx_rtd_theme 打开conf.py，将原本的html_theme = &#39;alabaster&#39;换成html_theme = &#39;sphinx_rtd_theme&#39; 在sphinx_rtd_theme的基础上修改样式可修改的项见官方文档 在conf.py中增加： // 增加logo图片，需在相应路径放图片 html_logo = &#39;./_static/logo.png&#39; // 注意此配置。放在&#39;_static&#39;文件夹下的文件会覆盖build出来的对应的文件，所以需要修改的样式文件放在_static路径下即可 html_static_path = [&#39;_static&#39;] // 不要在html页中显示rst源文件链接 html_show_sourcelink = False // 网页标签的小标题 html_title = &#39;xxx API&#39; // 网页标签的小图标 html_favicon = &#39;./_static/favicon.ico&#39;修改代码块配色方案 配色方案选择 在_static下增加pygments.css文件，把css内容复制进去即可 其他在conf.py中的修改 project = &#39;xxx&#39; copyright = &#39;2019, xxx Inc&#39; author = &#39;xxxx&#39; 托管 登录readthedocs官网 import a Project 手动导入 填写git url 管理 -&gt; 高级设置 上面用到sphinx_markdown_tables插件。在“需要pip要求文件来构建你的文档”栏填入一个文件名，此文件内容为sphinx-markdown-tables==0.0.9 不启用 PDF 构建 不启用 EPUB 构建 点击构建 参考ESP写得非常优秀、精致，图片也非常专业，向ESP看齐！！","categories":[{"name":"资源","slug":"资源","permalink":"/categories/资源/"}],"tags":[{"name":"tool","slug":"tool","permalink":"/tags/tool/"}],"keywords":[{"name":"资源","slug":"资源","permalink":"/categories/资源/"}]},{"title":"Hexo+Github+阿里云搭建网站全过程","slug":"Hexo搭建网站全过程","date":"2019-06-10T14:16:01.000Z","updated":"2019-07-06T06:19:27.336Z","comments":true,"path":"2019/06/10/Hexo搭建网站全过程/","link":"","permalink":"/2019/06/10/Hexo搭建网站全过程/","excerpt":"","text":"购买阿里云OSS和域名选择阿里云只是因为用惯了。不买也行，OSS除了用来测试基本没用 Hexo自带xxx.github.io域名，没有自己的域名也是可以的，就是丑了点 对象存储OSS 价钱：4.98元 容量：40GB，中国大陆通用 有效期：2019-05-27 23:01:50 ~ 2019-11-28 00:00 域名 网址：xiuin.net 价钱：69元 有效期：2019-05-28 23:53:39 ~ 2020-05-28 23:53:39 搭建nodejs环境安装nodejs选择对应系统下载： https://nodejs.org/en/download/ ，新版的nodejs已自带npm，安装nodejs时会一起安装把nodejs安装目录添加进环境变量，验证是否安装成功 # 显示版本号说明已经安装成功 node -v npm -v为了避免模块安装到C盘，新建文件夹node_global、node_cache，并把node_global目录加进环境变量，做如下设置 npm config set prefix &quot;D:\\nodejs\\node-v10.16.0-win-x64\\node_global&quot; npm config set cache &quot;D:\\nodejs\\node-v10.16.0-win-x64\\node_cache&quot;常用命令# &quot;-g&quot;：global目录，全局安装，会安装到设置的“D:\\nodejs\\node-v10.16.0-win-x64\\node_global” npm install express -g # 根据package.json安装依赖模块 npm i # 指定从国内仓库下载 npm install -g cnpm --registry=https://registry.npm.taobao.org 搭建Hexo安装npm install -g hexo-cliHexo基础知识目录树 ├── _config.yml ├── package.json ├── scaffolds ├── source | └── _posts └── themes config.yml 文件用于存放网站的配置信息，你可以在此配置大部分的参数 package.json 是应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮 scaffolds 是存放模板的文件夹，当新建文章时，Hexo 会根据scaffold来建立文件 source 是资源文件夹，用于存放用户资源（除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public文件夹，而其他文件会被拷贝过去） themes是主题文件夹，存放博客主题，Hexo 会根据主题来生成静态页面。 您可以在命令中指定文章的布局（layout），默认为 post，可以通过修改 _config.yml 中的 default_layout 参数来指定默认布局 (在后文的配置中会提到具体修改参数），这样所有的文章都会以md形式保存在source文件夹的_post文件夹中，只要在_post文件夹中新建md类型的文档，就能在执行hexo g的时候被渲染哈速度 常用命令# generate 生成静态文件 hexo g # server 启动服务器。默认情况下，访问网址为： http://localhost:4000/ hexo s # deploy 部署网站。部署网站前，需要预先生成静态文件 hexo d # clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)。 hexo clean # 新建文章，不指定layout会按照默认layout hexo new [layout] &lt;title&gt; 主题确定Sakura这个宅里宅气的Sakura主题第一眼看到就感觉很牛逼很喜欢，下载zip解压: https://github.com/honjun/hexo-theme-sakura 更多主题在这： https://hexo.io/themes/ sakura搭建cd E:\\workspace\\hexo\\hexo-theme-sakura-master npm i -g 部署cdn搭建 先把主题资源弄下来： git clone https://github.com/honjun/cdn.git github上创建名为cdn仓库 更改clone的仓库中的图片，并把仓库改为自己的 基础知识 通过jsDeliver引用资源使用方法： https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径 加载js https://cdn.jsdelivr.net/gh/honjun/cdn@1.0/js/jquery.js 加载图片 https://cdn.jsdelivr.net/gh/honjun/cdn@1.0/images/hb.png 增加评论系统Valine 注册： https://leancloud.cn/ 注册完以后需要创建一个应用，名字可以随便起，然后 进入应用-&gt;设置-&gt;应用key，获取你的appid 和 appkey 如图所示： 记得在Leancloud -&gt; 设置 -&gt; 安全中心 -&gt; Web 安全域名 把你的域名加进去 修改_config.yml中的配置 valine: true v_appId: xxx v_appKey: xxx挂载githubgithub创建新仓库，仓库名应该为：用户名.github.io 这个用户名使用你的github帐号名称代替，这是固定写法 # 安装Git部署插件 npm install -g hexo-deployer-git --save # 部署 hexo clean hexo g hexo d # 访问http://xiuin.github.io域名绑定 域名绑定 主机记录：www，记录值：xiuin.github.io 第二步，登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名 开启HTTPS 添加域名绑定记录 记录类型CNAME，主机记录@，记录值username.github.io 记录类型CNAME，主机记录www，记录值username.github.io 如果浏览器提示链接不安全，请检查自己的网站引用的资源文件有没有使用了http协议，请替换成相应的https资源 主题修改 色调确定 去掉不需要的东西 所有图片替换 增加自己的文章内容 blabla…….. 参考 GitHub+Hexo 搭建个人网站详细教程 windows下安装node.js及环境配置、部署项目 自建博客系列（四）HEXO博客的常识+更换NEXT主题 Hexo-Theme-Sakura jsDeliver+github使用教程，免费好用的cdn 为你的Hexo加上评论系统-Valine 利用GitHub搭建Hexo博客并开启HTTPS","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"web","slug":"web","permalink":"/tags/web/"},{"name":"nodejs","slug":"nodejs","permalink":"/tags/nodejs/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]}]}